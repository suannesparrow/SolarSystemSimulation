using Microsoft.VisualStudio.TestTools.UnitTesting;
using MP1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace MP1.Tests
{
    [TestClass()]
    public class PolynomialCalculusTests
    {
        //IsValidPolynomial Tests
        //PolynomialCalculus class instantiation for IsValidPolynomialTest
        PolynomialCalculus pcUT = new PolynomialCalculus();

        [TestMethod()]
        public void IsValidPolynomialTest1()
        {
            Assert.IsTrue(pcUT.IsValidPolynomial("1 2 3"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest2()
        {
            Assert.IsTrue(pcUT.IsValidPolynomial(" 2   3.5 0  "));
        }

        [TestMethod()]
        public void IsValidPolynomialTest3()
        {
            Assert.IsTrue(pcUT.IsValidPolynomial("-2 -3.547 0 0"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest4()
        {
            Assert.IsTrue(pcUT.IsValidPolynomial("0 .1 -1"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest5()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial("3 . 5"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest6()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial("2x^2+1"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest7()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial("a b c"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest8()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial("3 - 5"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest9()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial("1/2 2"));
        }

        [TestMethod()]
        public void IsValidPolynomialTest10()
        {
            Assert.IsFalse(pcUT.IsValidPolynomial(""));
        }

        //Get Polynomial Tests

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void GetPolynomialTest0()
        {
            PolynomialCalculus GPT0 = new PolynomialCalculus();
            GPT0.GetPolynomial();
        }

        [TestMethod()]
        public void GetPolynomialTest1()
        {
            PolynomialCalculus GPT1 = new PolynomialCalculus("1 1 1");
            Assert.AreEqual(GPT1.GetPolynomial(), "x^2 + x + 1");
        }

        [TestMethod()]
        public void GetPolynomialTest2()
        {
            PolynomialCalculus GPT2 = new PolynomialCalculus("-1 -1 -1");
            Assert.AreEqual(GPT2.GetPolynomial(), "-x^2 - x - 1");
        }

        [TestMethod()]
        public void GetPolynomialTest3()
        {
            PolynomialCalculus GPT3 = new PolynomialCalculus("3 2 1");
            Assert.AreEqual(GPT3.GetPolynomial(), "3x^2 + 2x + 1");
        }

        [TestMethod()]
        public void GetPolynomialTest4()
        {
            PolynomialCalculus GPT4 = new PolynomialCalculus("0");
            Assert.AreEqual(GPT4.GetPolynomial(), "0");
        }

        [TestMethod()]
        public void GetPolynomialTest5()
        {
            PolynomialCalculus GPT5 = new PolynomialCalculus("-123.456");
            Assert.AreEqual(GPT5.GetPolynomial(), "-123.456");
        }

        [TestMethod()]
        public void GetPolynomialTest6()
        {
            PolynomialCalculus GPT6 = new PolynomialCalculus("-1.3 0 -5");
            Assert.AreEqual(GPT6.GetPolynomial(), "-1.3x^2 - 5");
        }

        [TestMethod()]
        public void GetPolynomialTest7()
        {
            PolynomialCalculus GPT7 = new PolynomialCalculus("0 0 -.55 13 0");
            Assert.AreEqual(GPT7.GetPolynomial(), "-0.55x^2 + 13x");
        }

        [TestMethod()]
        public void GetPolynomialTest8()
        {
            PolynomialCalculus GPT8 = new PolynomialCalculus("1 0 -2.1 -1 5 12");
            Assert.AreEqual(GPT8.GetPolynomial(), "x^5 - 2.1x^3 - x^2 + 5x + 12");
        }


        //Evaluate Polynomial Tests
        [TestMethod()]
        public void EvaluatePolynomialTest()
        {
            string enter = "4.6 0 -678 15.7785 -9";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 1.8;

            Assert.AreEqual(-2129.0297400000004, polynomialCalculus.EvaluatePolynomial(x));
        }

        [TestMethod()]
        public void EvaluatePolynomialTest1()
        {
            string enter = "0";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 2;

            Assert.AreEqual(0, polynomialCalculus.EvaluatePolynomial(x));
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void EvaluatePolynomialTest2()
        {
            string enter = " ";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 5;
            polynomialCalculus.EvaluatePolynomial(x);
        }


        //Evaluate Polynomial Derivative Tests

        [TestMethod()]
        public void EvaluatePolynomialDerivativeTest()
        {
            string enter = "4.6 0 -678 15.7785 -9";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 1.8;

            Assert.AreEqual(-2317.7127000000005, polynomialCalculus.EvaluatePolynomialDerivative(x));
        }

        [TestMethod()]
        public void EvaluatePolynomialDerivativeTest1()
        {
            string enter = "0";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 1.8;

            Assert.AreEqual(0, polynomialCalculus.EvaluatePolynomialDerivative(x));
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void EvaluatePolynomialDerivativeTest2()
        {
            string enter = " ";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double x = 5;
            polynomialCalculus.EvaluatePolynomialDerivative(x);
        }

        //Get All Roots Tests

        [TestMethod()]
        public void GetAllRootsTest()
        {
            string enter = "1 0 -.25";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);
            List<double> rootList = polynomialCalculus.GetAllRoots(0.01);
            Assert.AreEqual(-0.506, rootList[0]);
            Assert.AreEqual(-0.5057, rootList[1]);
        }

        [TestMethod()]
        public void GetAllRootsTest1()
        {
            string enter = "1 0 1";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);
            List<double> rootList = polynomialCalculus.GetAllRoots(0.01);
            Assert.AreEqual(0, rootList.Count);
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void GetAllRootsTest2()
        {
            string enter = " ";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);
            List<double> rootList = polynomialCalculus.GetAllRoots(0.01);
        }


        //Evaluate Integral Tests

        [TestMethod()]
        public void EvaluatePolynomialIntegralTest()
        {
            string enter = "4.6 0 -678 15.7785 -9";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double a = 0;
            double b = 1.5;

            Assert.AreEqual(-751.5129374999999, polynomialCalculus.EvaluatePolynomialIntegral(a, b));
        }

        [TestMethod()]
        public void EvaluatePolynomialIntegralTest1()
        {
            string enter = "3 4 5.5";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double a = 0;
            double b = 0;

            Assert.AreEqual(0, polynomialCalculus.EvaluatePolynomialIntegral(a, b));
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void EvaluatePolynomialIntegralTest2()
        {
            string enter = " ";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            double a = 0;
            double b = 8;

            polynomialCalculus.EvaluatePolynomialIntegral(a, b);
        }
        //SetPolynomial Test
        /*[TestMethod()]
        public void SetPolynomialTest()
        {
            string enter = "6    7";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            Assert.IsFalse(polynomialCalculus.SetPolynomial());
        }
        [TestMethod()]
        public void SetPolynomialTest1()
        {
            string enter = "6 1 0";
            PolynomialCalculus polynomialCalculus = new PolynomialCalculus(enter);

            Assert.IsTrue(polynomialCalculus.SetPolynomial());
        }*/
    }
}
